"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sPoNgEmOCk = exports.spongeMock = exports.lower = exports.upper = undefined;
exports.decideCase = decideCase;
exports.isLetter = isLetter;
exports.getCase = getCase;

var _lodash = require("lodash.isstring");

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require("lodash.random");

var _lodash4 = _interopRequireDefault(_lodash3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isLetterRegExp = new RegExp("^[a-zA-Z]$");
var upper = exports.upper = Symbol("upper");
var lower = exports.lower = Symbol("lower");

var spongeMock = exports.spongeMock = function spongeMock(str) {
    if (!(0, _lodash2.default)(str)) {
        return str;
    }

    var emit = "";
    var prevLetter = void 0;
    var prev2Letter = void 0;
    var ansiCheck = false;
    var isAnsi = false;
    for (var ctr = 0; ctr < str.length; ctr++) {
        if (isLetter(str[ctr])) {
            prev2Letter = prevLetter;
            // Do not capitalize the 'm' in ANSI escape sequences
            if (isAnsi && 'm' === str[ctr]) {
                prevLetter = str[ctr];
                isAnsi = false;
                ansiCheck = false;
            } else {
                prevLetter = decideCase(str[ctr], prevLetter, prev2Letter);
            }
            emit += prevLetter;
        } else {
            if (ansiCheck) {
                if (/\d/.test(str[ctr])) {
                    isAnsi = true;
                } else {
                    ansiCheck = false;
                }
            }
            // This may be part of an ANSI escape sequence. Check that all
            // following characters are numbers
            if ('[' === str[ctr]) {
                ansiCheck = true;
            }

            emit += str[ctr];
        }
    }

    return emit;
};

function decideCase(curr, prev, prev2) {
    var odds = (0, _lodash4.default)(0, 99);

    var currCase = getCase(curr);
    var swapCaseFn = currCase === upper ? "toLowerCase" : "toUpperCase";

    // This is the first character, so we swap it 50% of the time.
    if (!prev && !prev2) {
        if (odds > 50) {
            return curr[swapCaseFn]();
        } else {
            return curr;
        }
    }

    // Previous character does not match case, so there is a 15% chance to
    // swap and match case. Prev2 does not impact this.
    if (getCase(prev) !== currCase) {
        if (odds >= 85) {
            return curr[swapCaseFn]();
        }
    }
    // Else, there is a 85% chance to swap if prev2 does not match case
    else if (!prev2 || getCase(prev2) !== currCase) {
            if (odds < 85) {
                return curr[swapCaseFn]();
            } else {
                return curr;
            }
        }
        // Prev2 *also* matches case, so there is a 98% chance to swap
        else if (odds < 98) {
                return curr[swapCaseFn]();
            }

    return curr;
}

function isLetter(char) {
    return isLetterRegExp.test(char);
}

function getCase(char) {
    return char === char.toUpperCase() ? upper : lower;
}

var sPoNgEmOCk = exports.sPoNgEmOCk = spongeMock;